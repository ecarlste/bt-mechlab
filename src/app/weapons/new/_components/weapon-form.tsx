"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { weaponInsertSchema } from "~/server/db/schema";

import { Button } from "~/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "~/components/ui/form";
import { Input } from "~/components/ui/input";

import { handleWeaponFormSubmit } from "../../actions";

export function WeaponForm() {
  const router = useRouter();
  const form = useForm<z.infer<typeof weaponInsertSchema>>({
    resolver: zodResolver(weaponInsertSchema),
    defaultValues: {
      name: "",
      heat: 0,
      damage: 0,
      range: "0/0/0/0",
    },
  });

  async function onSubmit(values: z.infer<typeof weaponInsertSchema>) {
    try {
      await handleWeaponFormSubmit(values);
      router.push("/weapons");
    } catch (error) {
      console.error("Failed to submit weapon form:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="" {...field} />
              </FormControl>
              <FormDescription>This is the name of the weapon.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="heat"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Heat</FormLabel>
              <FormControl>
                <Input
                  placeholder=""
                  {...field}
                  type="number"
                  onChange={(e) => field.onChange(e.target.valueAsNumber || 0)}
                />
              </FormControl>
              <FormDescription>This heat generated by the weapon when fired.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="damage"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Damage</FormLabel>
              <FormControl>
                <Input
                  placeholder=""
                  {...field}
                  type="number"
                  onChange={(e) => field.onChange(e.target.valueAsNumber || 0)}
                />
              </FormControl>
              <FormDescription>The damage dealt by the weapon.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="range"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Range</FormLabel>
              <FormControl>
                <Input placeholder="" {...field} />
              </FormControl>
              <FormDescription>The range of the weapon.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
